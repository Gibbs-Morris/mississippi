using System.Text.RegularExpressions;


namespace Mississippi.Core.Abstractions.Cqrs.Query;

/// <summary>
///     Provides validation helpers for query identifiers and versions.
/// </summary>
internal static class QueryValidation
{
    private const string AllowedPattern = "^[a-z0-9-]+$";

    // Replace autogenerated regex with manual compiled regex due to SYSLIB1044 limitation
    private static readonly Regex AllowedTokenRegex = new(
        AllowedPattern,
        RegexOptions.CultureInvariant | RegexOptions.NonBacktracking | RegexOptions.Compiled);

    /// <summary>
    ///     Validates an entity-type or identifier token.
    /// </summary>
    /// <param name="token">The token value to validate.</param>
    /// <param name="paramName">The name of the parameter being validated.</param>
    public static void ValidateToken(
        string? token,
        string paramName
    )
    {
        ArgumentException.ThrowIfNullOrWhiteSpace(token);
        if (!AllowedTokenRegex.IsMatch(token!))
        {
            throw new ArgumentException($"Value must match {AllowedPattern}.", paramName);
        }
    }

    /// <summary>
    ///     Validates that the supplied version number is non-zero.
    /// </summary>
    /// <param name="version">The version number to validate.</param>
    /// <param name="paramName">The name of the parameter being validated.</param>
    public static void ValidateVersion(
        long version,
        string paramName
    )
    {
        if (version == 0)
        {
            throw new ArgumentOutOfRangeException(paramName, version, "Version cannot be zero.");
        }
    }
}