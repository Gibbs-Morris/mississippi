---
description: Feature-centric naming & XML docs (StyleCop SA13xx/16xx)
globs: ["**/*.cs"]
alwaysApply: false
---
# Feature-Centric C# Naming & Commenting Playbook
**Source:** .github/instructions/naming.instructions.md
**Last synced:** 2025-08-08

## Do this
- Use feature-oriented namespaces: Company.Product.Feature(.SubFeature)[.Abstractions]. Max 5 segments.
- PascalCase for types, methods, properties; interfaces prefixed with I; enums singular type + PascalCase members.
- Boolean property prefixes: Is/Has/Can/Should.
- DI dependencies as `private Type Name { get; }` properties; private fields camelCase no underscore.
- Apply approved suffixes (Exception, Options, Provider, Handler, Middleware, Controller, Dto, Record) only when pattern fits.
- Provide XML docs for all public symbols with factual, imperative summaries; include <param>, <returns>, <typeparam> as needed.
- Keep comments accurate, non-repetitive; use examples that compile.
- Generic type parameters: T + descriptive (TResponse) or conventional (TKey).

## Avoid this
- Technical-bucket namespaces (Services, Models) or underscores / unconventional abbreviations.
- Public exposure without need; verbose or redundant XML docs.
- Placeholder or speculative comments; inconsistent param names.

## Checklist
- [ ] Namespace pattern valid
- [ ] Type & member names PascalCase / rules compliant
- [ ] Booleans prefixed correctly
- [ ] DI property pattern used
- [ ] XML docs complete & factual
- [ ] No underscores in private fields

## Cross-References
Coordinate with logging, service-registration, build, Orleans, serialization guidelines.
