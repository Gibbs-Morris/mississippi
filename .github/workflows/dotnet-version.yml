name: Verify .NET support

on:
  push:
    branches: [ main ]
  merge_group:
  pull_request:
    branches:
      - main
      - feature/**

jobs:
  dotnet-support-check:
    runs-on: ubuntu-latest

    steps:
    # ------------------------------------------------------------
    # 1. Checkout
    # ------------------------------------------------------------
    - uses: actions/checkout@v4

    # ------------------------------------------------------------
    # 2. Fetch supported channels from Microsoft
    # ------------------------------------------------------------
    - name: Fetch supported .NET channels
      id: fetch-matrix
      shell: pwsh
      run: |
        $url = 'https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json'
        Write-Host "‚ÜòÔ∏è  Downloading $url"
        $today = Get-Date
        $json  = Invoke-RestMethod $url -UseBasicParsing
        $supported = $json.'releases-index' |
          Where-Object { ($null -eq $_.'eol-date') -or ((Get-Date $_.'eol-date') -ge $today) } |
          ForEach-Object { $_.'channel-version' }

        Write-Host "‚úÖ Supported channels: $($supported -join ', ')"
        "SUPPORTED_CHANNELS=$($supported -join ',')" >> $Env:GITHUB_ENV

    # ------------------------------------------------------------
    # 3. Validate TFMs / SDK pins in the repository
    # ------------------------------------------------------------
    - name: Validate project target frameworks
      shell: pwsh
      run: |
        $supported = $Env:SUPPORTED_CHANNELS -split ',' | ForEach-Object Trim
        $tfms      = [System.Collections.Generic.List[string]]::new()

        function Extract-TFMsFromProject ([string]$file) {
          try {
            $xml = [xml](Get-Content $file -Raw)
          } catch {
            Write-Warning "‚ö†Ô∏è  Skipping unparsable XML file $file"
            return
          }

          if (-not $xml.Project) { return }     # No <Project> root ‚áí nothing to do

          foreach ($grp in $xml.Project.PropertyGroup) {
            foreach ($prop in 'TargetFramework','TargetFrameworks') {
              $node = $grp.$prop
              if ($node) {
                $raw = $node.'#text'
                if ($raw) {                     # Avoid ‚Äúmethod on null-valued expression‚Äù
                  $raw.Split(';') | ForEach-Object { $tfms.Add($_.Trim()) }
                }
              }
            }
          }
        }

        Get-ChildItem -Recurse -File -Include *.csproj,*.fsproj,*.vbproj,Directory.Build.props,Directory.Build.targets |
          ForEach-Object { Extract-TFMsFromProject $_.FullName }

        if (Test-Path global.json) {
          $gj = Get-Content global.json -Raw | ConvertFrom-Json
          if ($gj.sdk.version) { $tfms.Add("sdk:$($gj.sdk.version)") }
        }

        $tfms = $tfms | Sort-Object -Unique
        Write-Host "üîç Found TFMs/SDKs: $($tfms -join ', ')"

        # --- avoid empty-pipe parser error -----------------------
        $unsupportedTargets = foreach ($item in $tfms) {
          $version = switch -Regex ($item) {
            '^sdk:(\d+)\.(\d+)'        { "$($matches[1]).$($matches[2])"; break }
            '^netcoreapp(\d+)\.(\d+)'  { "$($matches[1]).$($matches[2])"; break }
            '^net(\d+)\.(\d+)'         { "$($matches[1]).$($matches[2])"; break }
            default                    { $null; break }
          }
          if ($version -and ($supported -notcontains $version)) { $item }
        }
        # ---------------------------------------------------------

        if ($unsupportedTargets) {
          Write-Error "‚ùå Unsupported TFMs/SDKs: $($unsupportedTargets -join ', ')"
          exit 1
        } else {
          Write-Host "üéâ All project targets are in support."
        }

    # ------------------------------------------------------------
    # 4. Validate explicit installs in workflow YAML
    # ------------------------------------------------------------
    - name: Validate workflow installs
      shell: pwsh
      run: |
        $supported = $Env:SUPPORTED_CHANNELS -split ',' | ForEach-Object Trim
        $yamlFiles = Get-ChildItem .github/workflows -Recurse -File -Include *.yml,*.yaml -ErrorAction SilentlyContinue
        $versions  = [System.Collections.Generic.List[string]]::new()

        foreach ($file in $yamlFiles) {
          $text = Get-Content $file.FullName -Raw

          # a) dotnet-version: 6.0.x  OR dotnet-version: |  (multiline)
          [regex]::Matches($text,'(?im)^\s*dotnet-version\s*:\s*(.+?)(?=\r?\n\S|\r?\n$)') |
            ForEach-Object {
              $v = $_.Groups[1].Value.Trim()
              if ($v -eq '|') {
                $after = $text.Substring($_.Index) -split '\r?\n'
                foreach ($line in $after[1..($after.Length-1)]) {
                  if ($line -match '^\s+[0-9]+\.[^\s]+') { $versions.Add($line.Trim()) }
                  elseif ($line -match '^\s*\S') { break }
                }
              } else { $versions.Add($v) }
            }

          # b) dotnet-install.* --version / -Version
          [regex]::Matches($text,'(?im)dotnet-install\.(?:ps1|sh).*?--?version\s+([0-9]+\.[0-9]+(?:\.[0-9]+)?)') |
            ForEach-Object { $versions.Add($_.Groups[1].Value) }
        }

        $versions = $versions | Sort-Object -Unique | Where-Object { $_ -match '^\d+\.\d+' }
        Write-Host "üîç Workflow installs: $($versions -join ', ')"

        $unsupportedInstalls = foreach ($v in $versions) {
          if ($v -match '^(\d+)\.(\d+)') {
            $chan = "$($matches[1]).$($matches[2])"
            if ($supported -notcontains $chan) { $v }
          }
        }

        if ($unsupportedInstalls) {
          Write-Error "‚ùå Unsupported SDK installs in workflow: $($unsupportedInstalls -join ', ')"
          exit 1
        } else {
          Write-Host "üéâ All workflow installs are in support."
        }
